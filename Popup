Got it — your popup buttons don’t work because the popup can’t “see” the current tab.
Fix: add the tabs permission and a bit of error handling. Then reload the extension.

1) Update manifest.json

{
  "manifest_version": 3,
  "name": "Auto Refresh Pro (HUD)",
  "version": "1.2",
  "description": "Auto-refresh with on-page HUD: set time, start, pause/resume, stop. Persists per tab.",
  "permissions": ["activeTab", "tabs", "storage"],   // <-- added "tabs"
  "action": { "default_popup": "popup.html", "default_title": "Auto Refresh Pro" },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"],
      "run_at": "document_idle"
    }
  ]
}

2) Replace popup.js with this (adds robust messaging + errors)

async function activeTab() {
  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
  return tab;
}

async function send(cmd, data = {}) {
  const tab = await activeTab();
  if (!tab?.id) {
    setStatus("No active tab");
    return null;
  }
  return new Promise((resolve) => {
    chrome.tabs.sendMessage(tab.id, { cmd, ...data }, (resp) => {
      const err = chrome.runtime.lastError;
      if (err) {
        setStatus("No access on this page (content script not running)");
        resolve(null);
      } else {
        resolve(resp);
      }
    });
  });
}

const minutesEl = document.getElementById("minutes");
const statusEl  = document.getElementById("status");
const setStatus = (t) => (statusEl.textContent = `Status: ${t}`);

document.getElementById("set").onclick    = async () => {
  const m = parseFloat(minutesEl.value);
  await send("setMinutes", { minutes: m });
  refresh();
};
document.getElementById("start").onclick  = async () => {
  const m = parseFloat(minutesEl.value);
  await send("start", { minutes: m });
  refresh();
};
document.getElementById("pause").onclick  = async () => { await send("pause");  refresh(); };
document.getElementById("resume").onclick = async () => { await send("resume"); refresh(); };
document.getElementById("stop").onclick   = async () => { await send("stop");   refresh(); };

async function refresh() {
  const s = await send("status");
  if (!s) return; // content script not present on this page
  minutesEl.value = s.minutes ?? minutesEl.value;
  setStatus(`${s.state}${s.countdown ? ` • ${s.countdown}s left` : ""}`);
}
refresh();

(No changes needed to content.js from my last message.)

3) Reload the extension

Go to chrome://extensions

Toggle Developer mode on (top-right)

Click Reload on your extension

Pin the extension icon (optional)


4) Use & test

1. Open a normal website (e.g., https://example.com).

> Content scripts can’t run on chrome://*, the Chrome Web Store, or the New Tab page.




2. Click the extension icon → popup opens.


3. Enter minutes (try 0.05 ≈ 3s for a quick test) → Set → Start.


4. You should see a draggable countdown HUD on the page.

Pause/Resume/Stop from popup or use the HUD buttons.




If buttons still don’t work

In the popup, if you see “No access on this page”, that page blocks extensions. Try another site.

On chrome://extensions, click Errors under the extension and read any message.

Ensure the extension shows “This can read and change site data” when you click the puzzle-piece → your extension → set to On all sites.


Want me to bundle this as a single ZIP so you can just load it, or add a tiny Options page to set a default interval?

